var Express = require('express');
var FS = require('fs');
var HTTP = require('http');
var Path = require('path');
var Static = require('serve-static');

var CProxy = require('../lib/control/proxy');
var Util = CProxy.Util;

require('../lib/router/config');

var app = Express();
var server = HTTP.createServer(app);

// Attach Logger
require('../lib/control/logger').attach(app);

// Attach redirects
var rewrites = Config.get('rewrites');
Object.keys(rewrites).forEach(function(path) {
  console.log('Adding rewrite from ' + path + ' to ' + rewrites[path]);
  app.use(path, function(req, res) {
    res.redirect(rewrites[path]);
  });
});

// Attach routes
var routes = Config.get('routes');
Object.keys(routes).forEach(function(path) {
  console.log('Adding route ' + path);
  app.use(path, CProxy.create(Util.defaults(routes[path], {
    rewriteLocation: false
  })));
});

// Attach static paths
var statics = Config.get('static');
Object.keys(statics).forEach(function(path) {
  console.log('Adding satic server ' + path);
  app.use(path, Static(statics[path]));
});


app.get('/_router/config', function(req, res, next) {
  res.json(Config.get());
});

// Listen on a TCP port
if (+(Config.get('service:listen'))) {
  return server.listen(Config.get('service:listen'), function() {
    console.log('Listening on TCP port ' + Config.get('service:listen'));
  });
}

// Listen on a UNIX socket
console.log('Opening UNIX socket ' + Config.get('service:listen'));

// Check if directory exists, and is a directory
var stats = FS.statSync(Path.dirname(Config.get('service:listen')));
if(!stats.isDirectory()){
  throw Error('Socket path must be in an existing direcotry!');
}

// Try to clean up socket file if it already exists
try {
  FS.unlinkSync(Config.get('service:listen'));
} catch(e) {}

server.listen(Config.get('service:listen'), function() {
  console.log('Listening on UNIX socket ' + Config.get('service:listen'));
});
